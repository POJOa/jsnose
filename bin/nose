#!/usr/bin/env node


/**
 * Module dependencies.
 */

var program = require('commander')
  , sprintf = require('util').format
  , path = require('path')
  , fs = require('fs')
  , glob = require('glob')
  , resolve = path.resolve
  , exists = fs.existsSync || path.existsSync
  , Nose = require('../')
  , utils = Nose.utils
  , interfaces = Nose.interfaces
  , join = path.join
  , basename = path.basename
  , cwd = process.cwd()
  , nose = new Nose;


/**
 * Files.
 */

var files = [];

/**
 * Globals.
 */

var globals = [];


// options

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[debug] [options] [files]')
  .option('-A, --async-only', "force all smells to take a callback (async)")
  .option('-C, --no-colors', 'force disabling of colors')
  .option('-G, --growl', 'enable growl notification support')
  .option('-R, --reporter <name>', 'specify the reporter to use', 'spec')
  .option('-c, --colors', 'force enabling of colors')
  .option('-d, --debug', "enable node's debugger, synonym for node --debug")
  .option('--reporters', 'display available reporters');

program.name = 'nose';

var extensions = ['js'];
var re = new RegExp('\\.(' + extensions.join('|') + ')$');

// --reporters

program.on('reporters', function () {
  console.log();
  console.log('    spec - hierarchical spec list');
  console.log('    json - single json object');
  console.log('    nyan - nyan cat!');
  console.log();
  process.exit();
});

// parse args

program.parse(process.argv);

// infinite stack traces

Error.stackTraceLimit = Infinity; // TODO: config

// reporter

nose.reporter(program.reporter);

// load reporter

try {
    Reporter = require('../lib/reporters/' + program.reporter);
} catch (err) {
  try {
    Reporter = require(program.reporter);
  } catch (err) {
    throw new Error('reporter "' + program.reporter + '" does not exist');
  }
}

// --no-colors

if (!program.colors) nose.useColors(false);

// --colors

if (~process.argv.indexOf('--colors') ||
    ~process.argv.indexOf('-c')) {
  nose.useColors(true);
}

// files

var args = program.args;

// default files to test/*.{js}

if (!args.length) args.push('_smells');

args.forEach(function (arg) {
    files = files.concat(lookupFiles(arg, program.recursive));
});

// resolve

files = files.map(function (path) {
    return resolve(path);
});

if (program.sort) {
  files.sort();
}

// load

nose.files = files;
runner = nose.run(program.exit ? process.exit : exitLater);

function exitLater (code) {
    process.on('exit', function () {
        process.exit(code);
    });
}

process.on('SIGINT', function () {
    runner.abort();
});

/**
 * Parse list.
 */

function list (str) {
  return str.split(/ *, */);
}

/**
 * Lookup file names at the given `path`.
 */

function lookupFiles (path, recursive) {
    var files = [];

    if ( !exists(path) ) {
        if ( exists(path + '.js') ) {
            path += '.js'
        } else {
            files = glob.sync(path);
            if (!files.length) throw new Error("cannot resolve path (or pattern) '" + path + "'");
            return files;
        }
    }

    var stat = fs.statSync(path);
    if ( stat.isFile() ) return path;

    fs.readdirSync(path).forEach(function (file) {
        file = join(path, file);
        var stat = fs.statSync(file);

        if ( stat.isDirectory() ) {
            if (recursive) {
                files = files.concat(lookupFiles(file, recursive));
            }
            return;
        }

        if (!stat.isFile() || !re.test(file) || basename(file)[0] == '.') return;

        files.push(file);
    });

    return files;
}
